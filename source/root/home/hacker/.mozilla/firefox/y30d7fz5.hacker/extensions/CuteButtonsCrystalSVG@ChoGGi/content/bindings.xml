<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE bindings [
<!ENTITY % notificationDTD SYSTEM "chrome://global/locale/notification.dtd">
%notificationDTD;
]>
<bindings id="ChoGGisBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="splitmenu">
	<content>
		<xul:hbox class="menu-iconic-left" align="center" pack="center">
			<xul:image class="menu-iconic-icon" xbl:inherits="src=image"/>
		</xul:hbox>
		<xul:hbox anonid="menuitem" flex="1" class="splitmenu-menuitem" xbl:inherits="iconic,label,disabled,onclick=oncommand,_moz-menuactive=active"/>
		<xul:menu anonid="menu" class="splitmenu-menu" xbl:inherits="disabled,_moz-menuactive=active" oncommand="event.stopPropagation();">
		<children includes="menupopup"/>
	  </xul:menu>
	</content>

	<implementation>
	  <field name="menuitem" readonly="true">
		document.getAnonymousElementByAttribute(this, "anonid", "menuitem");
	  </field>
	  <field name="menu" readonly="true">
		document.getAnonymousElementByAttribute(this, "anonid", "menu");
	  </field>

	  <field name="_menuDelay">600</field>

	  <field name="_parentMenupopup"><![CDATA[
		let node = this.parentNode;
		while (node) {
		  if (node.localName == "menupopup")
			break;
		  node = node.parentNode;
		}
		node;
	  ]]></field>
	</implementation>

	<handlers>
	  <handler event="mouseover"><![CDATA[
		if (this.getAttribute("active") != "true" &&
			this.getAttribute("disabled") != "true") {
		  this.setAttribute("active", "true");

		  let self = this;
		  setTimeout(function () {
			if (self.getAttribute("active") == "true")
			  self.menu.open = true;
		  }, this._menuDelay);
		}
	  ]]></handler>

	  <handler event="mouseout"><![CDATA[
		if (this.menu.open)
		  return;

		let node = event.relatedTarget;
		while (node) {
		  if (node == this)
			return;
		  node = node.parentNode;
		}
		this.removeAttribute("active");
	  ]]></handler>

	  <handler event="popuphidden"><![CDATA[
		if (event.target == this.firstChild)
		  this.removeAttribute("active");
	  ]]></handler>

	  <handler event="popupshowing"><![CDATA[
		if (event.target == this.firstChild &&
			this._parentMenupopup._currentPopup)
		  this._parentMenupopup._currentPopup.hidePopup();
	  ]]></handler>

	  <handler event="click" phase="capturing"><![CDATA[
		let node = event.originalTarget;
		while (true) {
		  if (node == this.menuitem)
			break;
		  if (node == this)
			return;
		  node = node.parentNode;
		}

		this._parentMenupopup.hidePopup();
	  ]]></handler>
	</handlers>
  </binding>

<binding id="statusbarpanel-iconic-text"
	display="xul:button"
	role="xul:button"
	extends="chrome://global/content/bindings/general.xml#statusbarpanel">
		<content>
			<xul:image class="statusbarpanel-icon" xbl:inherits="src,src=image"/>
			<xul:label class="statusbarpanel-text" xbl:inherits="value=label,crop"/>
		</content>
</binding>

<binding id="image" role="xul:image">
	<implementation implements="nsIDOMXULImageElement">
		<property name="src" onget="return this.getAttribute('src');" onset="this.setAttribute('src',val); return val;"/>
	</implementation>
</binding>

  <binding id="menu-menubar-iconic-no-text"
		   extends="chrome://global/content/bindings/menu.xml#menu-base">
	<content>
	  <xul:image class="menubar-left" xbl:inherits="src=image"/>
	  <children includes="menupopup"/>
	</content>
  </binding>

  <binding id="menuitem-iconic" extends="chrome://global/content/bindings/menu.xml#menuitem">
	<content>
	  <xul:hbox class="menu-iconic-left" align="center" pack="center"
				xbl:inherits="selected,_moz-menuactive,disabled,checked">
		<xul:image class="menu-iconic-icon" xbl:inherits="src=image,validate,src"/>
	  </xul:hbox>
	  <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop" crop="right"/>
	  <xul:hbox class="menu-accel-container" anonid="accel">
		<xul:label class="menu-iconic-accel" xbl:inherits="value=acceltext"/>
	  </xul:hbox>
	</content>
  </binding>

</bindings>